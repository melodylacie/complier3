Grammar

    0 $accept: input $end

    1 input: %empty
    2      | exp
    3      | cmd
    4      | exp '('
    5      | exp ')'

    6 exp: INTEGER_LITERAL
    7    | ref
    8    | exp MINUS exp
    9    | exp PLUS exp
   10    | exp MULT exp
   11    | exp DIVIDE exp
   12    | exp MOD exp
   13    | exp OR exp
   14    | exp AND exp
   15    | NOT exp
   16    | MINUS exp
   17    | '(' exp ')'

   18 cmd: SHOW ref
   19    | LOAD ref REG
   20    | PUSH ref
   21    | POP REG

   22 ref: REG
   23    | ACC
   24    | TOP
   25    | SIZE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 17
')' (41) 5 17
error (256)
INTEGER_LITERAL (258) 6
REG (259) 19 21 22
PLUS (260) 9
MINUS (261) 8 16
MULT (262) 10
DIVIDE (263) 11
MOD (264) 12
OR (265) 13
AND (266) 14
NOT (267) 15
ACC (268) 23
TOP (269) 24
SIZE (270) 25
PUSH (271) 20
POP (272) 21
SHOW (273) 18
LOAD (274) 19


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
input (23)
    on left: 1 2 3 4 5, on right: 0
exp (24)
    on left: 6 7 8 9 10 11 12 13 14 15 16 17, on right: 2 4 5 8 9 10
    11 12 13 14 15 16 17
cmd (25)
    on left: 18 19 20 21, on right: 3
ref (26)
    on left: 22 23 24 25, on right: 7 18 19 20


State 0

    0 $accept: . input $end

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8
    PUSH             shift, and go to state 9
    POP              shift, and go to state 10
    SHOW             shift, and go to state 11
    LOAD             shift, and go to state 12

    $default  reduce using rule 1 (input)

    input  go to state 13
    exp    go to state 14
    cmd    go to state 15
    ref    go to state 16


State 1

    6 exp: INTEGER_LITERAL .

    $default  reduce using rule 6 (exp)


State 2

   22 ref: REG .

    $default  reduce using rule 22 (ref)


State 3

   17 exp: '(' . exp ')'

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 17
    ref  go to state 16


State 4

   16 exp: MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 18
    ref  go to state 16


State 5

   15 exp: NOT . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 19
    ref  go to state 16


State 6

   23 ref: ACC .

    $default  reduce using rule 23 (ref)


State 7

   24 ref: TOP .

    $default  reduce using rule 24 (ref)


State 8

   25 ref: SIZE .

    $default  reduce using rule 25 (ref)


State 9

   20 cmd: PUSH . ref

    REG   shift, and go to state 2
    ACC   shift, and go to state 6
    TOP   shift, and go to state 7
    SIZE  shift, and go to state 8

    ref  go to state 20


State 10

   21 cmd: POP . REG

    REG  shift, and go to state 21


State 11

   18 cmd: SHOW . ref

    REG   shift, and go to state 2
    ACC   shift, and go to state 6
    TOP   shift, and go to state 7
    SIZE  shift, and go to state 8

    ref  go to state 22


State 12

   19 cmd: LOAD . ref REG

    REG   shift, and go to state 2
    ACC   shift, and go to state 6
    TOP   shift, and go to state 7
    SIZE  shift, and go to state 8

    ref  go to state 23


State 13

    0 $accept: input . $end

    $end  shift, and go to state 24


State 14

    2 input: exp .
    4      | exp . '('
    5      | exp . ')'
    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp

    '('     shift, and go to state 25
    ')'     shift, and go to state 26
    PLUS    shift, and go to state 27
    MINUS   shift, and go to state 28
    MULT    shift, and go to state 29
    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33

    $default  reduce using rule 2 (input)


State 15

    3 input: cmd .

    $default  reduce using rule 3 (input)


State 16

    7 exp: ref .

    $default  reduce using rule 7 (exp)


State 17

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp
   17    | '(' exp . ')'

    ')'     shift, and go to state 34
    PLUS    shift, and go to state 27
    MINUS   shift, and go to state 28
    MULT    shift, and go to state 29
    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33


State 18

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp
   16    | MINUS exp .

    MULT    shift, and go to state 29
    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33

    $default  reduce using rule 16 (exp)


State 19

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp
   15    | NOT exp .

    $default  reduce using rule 15 (exp)


State 20

   20 cmd: PUSH ref .

    $default  reduce using rule 20 (cmd)


State 21

   21 cmd: POP REG .

    $default  reduce using rule 21 (cmd)


State 22

   18 cmd: SHOW ref .

    $default  reduce using rule 18 (cmd)


State 23

   19 cmd: LOAD ref . REG

    REG  shift, and go to state 35


State 24

    0 $accept: input $end .

    $default  accept


State 25

    4 input: exp '(' .

    $default  reduce using rule 4 (input)


State 26

    5 input: exp ')' .

    $default  reduce using rule 5 (input)


State 27

    9 exp: exp PLUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 36
    ref  go to state 16


State 28

    8 exp: exp MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 37
    ref  go to state 16


State 29

   10 exp: exp MULT . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 38
    ref  go to state 16


State 30

   11 exp: exp DIVIDE . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 39
    ref  go to state 16


State 31

   12 exp: exp MOD . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 40
    ref  go to state 16


State 32

   13 exp: exp OR . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 41
    ref  go to state 16


State 33

   14 exp: exp AND . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    '('              shift, and go to state 3
    MINUS            shift, and go to state 4
    NOT              shift, and go to state 5
    ACC              shift, and go to state 6
    TOP              shift, and go to state 7
    SIZE             shift, and go to state 8

    exp  go to state 42
    ref  go to state 16


State 34

   17 exp: '(' exp ')' .

    $default  reduce using rule 17 (exp)


State 35

   19 cmd: LOAD ref REG .

    $default  reduce using rule 19 (cmd)


State 36

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
    9    | exp PLUS exp .
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp

    MULT    shift, and go to state 29
    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33

    $default  reduce using rule 9 (exp)


State 37

    8 exp: exp . MINUS exp
    8    | exp MINUS exp .
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp

    MULT    shift, and go to state 29
    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33

    $default  reduce using rule 8 (exp)


State 38

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   10    | exp MULT exp .
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp

    DIVIDE  shift, and go to state 30
    MOD     shift, and go to state 31
    OR      shift, and go to state 32
    AND     shift, and go to state 33

    $default  reduce using rule 10 (exp)


State 39

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   11    | exp DIVIDE exp .
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp

    MOD  shift, and go to state 31
    OR   shift, and go to state 32
    AND  shift, and go to state 33

    $default  reduce using rule 11 (exp)


State 40

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   12    | exp MOD exp .
   13    | exp . OR exp
   14    | exp . AND exp

    OR   shift, and go to state 32
    AND  shift, and go to state 33

    $default  reduce using rule 12 (exp)


State 41

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   13    | exp OR exp .
   14    | exp . AND exp

    AND  shift, and go to state 33

    $default  reduce using rule 13 (exp)


State 42

    8 exp: exp . MINUS exp
    9    | exp . PLUS exp
   10    | exp . MULT exp
   11    | exp . DIVIDE exp
   12    | exp . MOD exp
   13    | exp . OR exp
   14    | exp . AND exp
   14    | exp AND exp .

    $default  reduce using rule 14 (exp)
