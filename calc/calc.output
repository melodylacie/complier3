Terminals unused in grammar

   ACC
   TOP
   SIZE
   PUSH
   POP
   SHOW


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | exp
    3      | cmd

    4 exp: INTEGER_LITERAL
    5    | exp MINUS exp
    6    | exp PLUS exp
    7    | exp MULT exp
    8    | exp DIVIDE exp
    9    | exp MOD exp
   10    | exp OR exp
   11    | exp AND exp
   12    | NOT exp
   13    | MINUS exp
   14    | '(' exp ')'

   15 cmd: REG
   16    | LOAD cmd cmd


Terminals, with rules where they appear

$end (0) 0
'(' (40) 14
')' (41) 14
error (256)
INTEGER_LITERAL (258) 4
REG (259) 15
PLUS (260) 6
MINUS (261) 5 13
MULT (262) 7
DIVIDE (263) 8
MOD (264) 9
OR (265) 10
AND (266) 11
NOT (267) 12
ACC (268)
TOP (269)
SIZE (270)
PUSH (271)
POP (272)
SHOW (273)
LOAD (274) 16


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
input (23)
    on left: 1 2 3, on right: 0
exp (24)
    on left: 4 5 6 7 8 9 10 11 12 13 14, on right: 2 5 6 7 8 9 10 11
    12 13 14
cmd (25)
    on left: 15 16, on right: 3 16


State 0

    0 $accept: . input $end

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    LOAD             shift, and go to state 5
    '('              shift, and go to state 6

    $default  reduce using rule 1 (input)

    input  go to state 7
    exp    go to state 8
    cmd    go to state 9


State 1

    4 exp: INTEGER_LITERAL .

    $default  reduce using rule 4 (exp)


State 2

   15 cmd: REG .

    $default  reduce using rule 15 (cmd)


State 3

   13 exp: MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 10


State 4

   12 exp: NOT . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 11


State 5

   16 cmd: LOAD . cmd cmd

    REG   shift, and go to state 2
    LOAD  shift, and go to state 5

    cmd  go to state 12


State 6

   14 exp: '(' . exp ')'

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 13


State 7

    0 $accept: input . $end

    $end  shift, and go to state 14


State 8

    2 input: exp .
    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp

    PLUS    shift, and go to state 15
    MINUS   shift, and go to state 16
    MULT    shift, and go to state 17
    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21

    $default  reduce using rule 2 (input)


State 9

    3 input: cmd .

    $default  reduce using rule 3 (input)


State 10

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp
   13    | MINUS exp .

    MULT    shift, and go to state 17
    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21

    $default  reduce using rule 13 (exp)


State 11

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp
   12    | NOT exp .

    $default  reduce using rule 12 (exp)


State 12

   16 cmd: LOAD cmd . cmd

    REG   shift, and go to state 2
    LOAD  shift, and go to state 5

    cmd  go to state 22


State 13

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp
   14    | '(' exp . ')'

    PLUS    shift, and go to state 15
    MINUS   shift, and go to state 16
    MULT    shift, and go to state 17
    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21
    ')'     shift, and go to state 23


State 14

    0 $accept: input $end .

    $default  accept


State 15

    6 exp: exp PLUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 24


State 16

    5 exp: exp MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 25


State 17

    7 exp: exp MULT . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 26


State 18

    8 exp: exp DIVIDE . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 27


State 19

    9 exp: exp MOD . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 28


State 20

   10 exp: exp OR . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 29


State 21

   11 exp: exp AND . exp

    INTEGER_LITERAL  shift, and go to state 1
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 6

    exp  go to state 30


State 22

   16 cmd: LOAD cmd cmd .

    $default  reduce using rule 16 (cmd)


State 23

   14 exp: '(' exp ')' .

    $default  reduce using rule 14 (exp)


State 24

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    6    | exp PLUS exp .
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp

    MULT    shift, and go to state 17
    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21

    $default  reduce using rule 6 (exp)


State 25

    5 exp: exp . MINUS exp
    5    | exp MINUS exp .
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp

    MULT    shift, and go to state 17
    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21

    $default  reduce using rule 5 (exp)


State 26

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    7    | exp MULT exp .
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp

    DIVIDE  shift, and go to state 18
    MOD     shift, and go to state 19
    OR      shift, and go to state 20
    AND     shift, and go to state 21

    $default  reduce using rule 7 (exp)


State 27

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    8    | exp DIVIDE exp .
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp

    MOD  shift, and go to state 19
    OR   shift, and go to state 20
    AND  shift, and go to state 21

    $default  reduce using rule 8 (exp)


State 28

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
    9    | exp MOD exp .
   10    | exp . OR exp
   11    | exp . AND exp

    OR   shift, and go to state 20
    AND  shift, and go to state 21

    $default  reduce using rule 9 (exp)


State 29

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   10    | exp OR exp .
   11    | exp . AND exp

    AND  shift, and go to state 21

    $default  reduce using rule 10 (exp)


State 30

    5 exp: exp . MINUS exp
    6    | exp . PLUS exp
    7    | exp . MULT exp
    8    | exp . DIVIDE exp
    9    | exp . MOD exp
   10    | exp . OR exp
   11    | exp . AND exp
   11    | exp AND exp .

    $default  reduce using rule 11 (exp)
