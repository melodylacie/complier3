Terminals unused in grammar

   TOP
   SIZE
   PUSH
   POP


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | exp
    3      | cmd

    4 exp: INTEGER_LITERAL
    5    | REG
    6    | exp MINUS exp
    7    | exp PLUS exp
    8    | exp MULT exp
    9    | exp DIVIDE exp
   10    | exp MOD exp
   11    | exp OR exp
   12    | exp AND exp
   13    | NOT exp
   14    | MINUS exp
   15    | '(' exp ')'

   16 cmd: SHOW ref
   17    | LOAD ref REG

   18 ref: REG
   19    | ACC


Terminals, with rules where they appear

$end (0) 0
'(' (40) 15
')' (41) 15
error (256)
INTEGER_LITERAL (258) 4
REG (259) 5 17 18
PLUS (260) 7
MINUS (261) 6 14
MULT (262) 8
DIVIDE (263) 9
MOD (264) 10
OR (265) 11
AND (266) 12
NOT (267) 13
ACC (268) 19
TOP (269)
SIZE (270)
PUSH (271)
POP (272)
SHOW (273) 16
LOAD (274) 17


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
input (23)
    on left: 1 2 3, on right: 0
exp (24)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15, on right: 2 6 7 8 9 10
    11 12 13 14 15
cmd (25)
    on left: 16 17, on right: 3
ref (26)
    on left: 18 19, on right: 16 17


State 0

    0 $accept: . input $end

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    SHOW             shift, and go to state 5
    LOAD             shift, and go to state 6
    '('              shift, and go to state 7

    $default  reduce using rule 1 (input)

    input  go to state 8
    exp    go to state 9
    cmd    go to state 10


State 1

    4 exp: INTEGER_LITERAL .

    $default  reduce using rule 4 (exp)


State 2

    5 exp: REG .

    $default  reduce using rule 5 (exp)


State 3

   14 exp: MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 11


State 4

   13 exp: NOT . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 12


State 5

   16 cmd: SHOW . ref

    REG  shift, and go to state 13
    ACC  shift, and go to state 14

    ref  go to state 15


State 6

   17 cmd: LOAD . ref REG

    REG  shift, and go to state 13
    ACC  shift, and go to state 14

    ref  go to state 16


State 7

   15 exp: '(' . exp ')'

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 17


State 8

    0 $accept: input . $end

    $end  shift, and go to state 18


State 9

    2 input: exp .
    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp

    PLUS    shift, and go to state 19
    MINUS   shift, and go to state 20
    MULT    shift, and go to state 21
    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25

    $default  reduce using rule 2 (input)


State 10

    3 input: cmd .

    $default  reduce using rule 3 (input)


State 11

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp
   14    | MINUS exp .

    MULT    shift, and go to state 21
    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25

    $default  reduce using rule 14 (exp)


State 12

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp
   13    | NOT exp .

    $default  reduce using rule 13 (exp)


State 13

   18 ref: REG .

    $default  reduce using rule 18 (ref)


State 14

   19 ref: ACC .

    $default  reduce using rule 19 (ref)


State 15

   16 cmd: SHOW ref .

    $default  reduce using rule 16 (cmd)


State 16

   17 cmd: LOAD ref . REG

    REG  shift, and go to state 26


State 17

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp
   15    | '(' exp . ')'

    PLUS    shift, and go to state 19
    MINUS   shift, and go to state 20
    MULT    shift, and go to state 21
    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25
    ')'     shift, and go to state 27


State 18

    0 $accept: input $end .

    $default  accept


State 19

    7 exp: exp PLUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 28


State 20

    6 exp: exp MINUS . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 29


State 21

    8 exp: exp MULT . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 30


State 22

    9 exp: exp DIVIDE . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 31


State 23

   10 exp: exp MOD . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 32


State 24

   11 exp: exp OR . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 33


State 25

   12 exp: exp AND . exp

    INTEGER_LITERAL  shift, and go to state 1
    REG              shift, and go to state 2
    MINUS            shift, and go to state 3
    NOT              shift, and go to state 4
    '('              shift, and go to state 7

    exp  go to state 34


State 26

   17 cmd: LOAD ref REG .

    $default  reduce using rule 17 (cmd)


State 27

   15 exp: '(' exp ')' .

    $default  reduce using rule 15 (exp)


State 28

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    7    | exp PLUS exp .
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp

    MULT    shift, and go to state 21
    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25

    $default  reduce using rule 7 (exp)


State 29

    6 exp: exp . MINUS exp
    6    | exp MINUS exp .
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp

    MULT    shift, and go to state 21
    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25

    $default  reduce using rule 6 (exp)


State 30

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    8    | exp MULT exp .
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp

    DIVIDE  shift, and go to state 22
    MOD     shift, and go to state 23
    OR      shift, and go to state 24
    AND     shift, and go to state 25

    $default  reduce using rule 8 (exp)


State 31

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
    9    | exp DIVIDE exp .
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp

    MOD  shift, and go to state 23
    OR   shift, and go to state 24
    AND  shift, and go to state 25

    $default  reduce using rule 9 (exp)


State 32

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   10    | exp MOD exp .
   11    | exp . OR exp
   12    | exp . AND exp

    OR   shift, and go to state 24
    AND  shift, and go to state 25

    $default  reduce using rule 10 (exp)


State 33

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   11    | exp OR exp .
   12    | exp . AND exp

    AND  shift, and go to state 25

    $default  reduce using rule 11 (exp)


State 34

    6 exp: exp . MINUS exp
    7    | exp . PLUS exp
    8    | exp . MULT exp
    9    | exp . DIVIDE exp
   10    | exp . MOD exp
   11    | exp . OR exp
   12    | exp . AND exp
   12    | exp AND exp .

    $default  reduce using rule 12 (exp)
